// 11724 연결 요소의 개수
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int main()
{
    int n, m;
    cin >> n >> m;
    
    vector<int> edge(n+1, -1); // 각 정점이 어느 연결 그룹과 연결되어있는지 저장
    vector<vector<int>> neighbor(n+1); // i번째 접점과 인접한 접점들
    vector<int> visited(n+1, 0);    // 방문했는지 알아보는 용도로 사용
    int vSize = 0;
    int ret = 0;
    for (int i = 0 ; i < m; i++)
    {
        int st, dt;
        cin >> st >> dt;
        
        // 서로 이웃으로 소개
        neighbor[st].push_back(dt);
        neighbor[dt].push_back(st);
        
        // 둘 다 들어온 적 없는 점이라면 새롭게 생성
        if (edge[st] == -1 && edge[dt] == -1)
        {
            edge[st] = vSize;
            edge[dt] = vSize;
            vSize++;
            ret++;
        }
        
        // 둘 중 하나만 들어온 적 없는 점이라면 기존거에 편입
        else if (edge[st] == -1)
        {
            edge[st] = edge[dt];
        }
        else if (edge[dt] == -1)
        {
            edge[dt] = edge[st];
        }
        
        // 둘 다 들어온 적 있는 점이라면, 더 인덱스가 작은 그룹으로 옮기기
        else
        {
            // 원형 그래프 등 두 점이 이미 같은 그룹인 경우는 패스
            if (edge[st] == edge[dt])
                continue;
            
            int lower = edge[st];
            if (edge[st] > edge[dt])
            {
                lower = edge[dt];
            }
            
            queue<int> q;
            for (int j = 0 ; j <= n; j++)
                visited[j] = 0;
            
            // 방문하는 모든 정점을 lower 연결 그룹에 존재한다고 바꾼다.
            q.push(st);
            while (0 < q.size())
            {
                int t = q.front();
                q.pop();
                if (visited[t] == 1)
                    continue;
                visited[t] = 1;
                edge[t] = lower;
                for (int j = 0; j < neighbor[t].size(); j++)
                {
                    q.push(neighbor[t][j]);
                }
            }
            ret--;
        }
    }
    
    // 간선을 갖지 않고 정점만 있는 경우를 추가한다
    for (int i = 1 ; i <= n; i++)
    {
        if (edge[i] == -1)
            ret++;
    }
    cout << ret << endl;

    return 0;
}
