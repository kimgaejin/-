//11725 트리의 부모 찾기
#include <iostream>
#include <vector>

using namespace std;

// 루트로부터 얼마나 떨어졌는지 distance와 인접한 노드들을 저장하는 구조체
typedef struct node
{
    int distance;
    int parent;
    vector<int> neighbor;
} node;

// 1번부터 시작하여 depth를 늘려가며 인접한 노드들이 distance를 1씩 늘리게 만드는 함수
void func(vector<node> &v, int cur, int depth, int parent)
{
    if (v[cur].distance != -1)
        return;
        
    //cout << cur << " " << depth << endl;
    v[cur].distance = depth;
    v[cur].parent = parent;
    for (int i = 0 ; i < v[cur].neighbor.size(); i++)
    {
        func(v, v[cur].neighbor[i], depth+1, cur);
    }
}

//루트가 1번이니, 1번과 얼마나 떨어졌느냐로 부모관계를 파악할 수 있다.
int main()
{
    //ios_base::sync_with_stdio(false);
    //cin.tie(NULL);
    
    int n;
    cin >> n;
 
    vector<node> v(n+1);
    for (int i = 0 ; i <= n; i++)
    {
        v[i].distance = -1;
    }
    
    for (int i = 0 ; i < n-1; i++)
    {
        int a, b;
        cin >> a >> b;
        
        v[a].neighbor.push_back(b);
        v[b].neighbor.push_back(a);
    }
    
    func(v, 1, 0, -1);
    
    // 출력시 속도만 문자열로 합쳐서 속도 해결
    string ret = "";
    for (int i = 2 ; i <= n; i++)
    {
        ret += to_string(v[i].parent) + "\n";
    }
    cout << ret << endl;

    return 0;
}
